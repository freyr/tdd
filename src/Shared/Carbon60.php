<?php

declare(strict_types=1);

namespace Freyr\TDD\Shared;

use DateTimeImmutable;
use DateTimeInterface;
use JetBrains\PhpStorm\Internal\LanguageLevelTypeAware;

class Carbon60 extends DateTimeImmutable
{
    public static function createFromFormat(
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $format,
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $datetime,
        #[LanguageLevelTypeAware(['8.0' => 'DateTimeZone|null'], default: 'DateTimeZone')] $timezone = null
    ): Carbon60|false {
        return parent::createFromFormat($format, $datetime, $timezone); // TODO: Change the autogenerated stub
    }

    public static function fromDateTime(DateTimeImmutable $dateTime): self
    {
        // Preserve microseconds and timezone
        return new self($dateTime->format('Y-m-d H:i:s.u'), $dateTime->getTimezone());
    }

    public function isChristmassDay(): bool
    {
        return $this->format('m-d') === '12-25';
    }

    public function isChristmasEve(): bool
    {
        return $this->format('m-d') === '12-24';
    }

    public function isBlackFriday(): bool
    {
        $year = (int) $this->format('Y');
        $tz = $this->getTimezone();
        $novemberFirst = new self(sprintf('%04d-11-01 00:00:00', $year), $tz);

        $dow = (int) $novemberFirst->format('N');
        $daysUntilThursday = (4 - $dow + 7) % 7;
        $firstThursday = $novemberFirst->modify("+{$daysUntilThursday} days");
        $fourthThursday = $firstThursday->modify('+3 weeks');
        $blackFriday = $fourthThursday->modify('+1 day');

        return $this->format('Y-m-d') === $blackFriday->format('Y-m-d');
    }
}